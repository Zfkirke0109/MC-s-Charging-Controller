#!/sbin/sh
# MC's Charging Controller
# mcc update-binary ( 201802091 )
# MCMotherEffin' @ XDA Developers

# Copyright (c) 2018 Jaymin " MCMotherEffin' " Suthar

if (grep '^/sbin/sh' </proc/$$/cmdline >/dev/null); then

  # Abort if recovery installation
  ## we parse uevents for boot mode only
  ui_fd=/proc/self/fd/$2

  ui_print() { echo -e "ui_print $1\nui_print" >>$ui_fd; }

  ui_print ' '; ui_print ' ';
  ui_print '- Abort :- Please install in boot mode'
  ui_print ' '; ui_print ' ';
  exit 1
fi
echo ' '

# Define variables
zip_file="$3"

# Define functions

abort() { echo -e "- Abort :- $1\n"; exit 1; }

# Get the system minding A / B devices
system=/system
if [ -d /system_root ]; then
  system+=_root/system
fi

# Find busybox and Magisk mount point
for magisk_bb in $(find /data -type f -name busybox | grep /magisk/busybox$); do
  if ($magisk_bb | grep 'topjohnwu ' >/dev/null); then
    image=${magisk_bb%/*/*}/magisk.img
    if [ -f $image ]; then
      for loop_device in /dev/block/loop*; do
        if ($magisk_bb losetup $loop_device | grep " $image$" >/dev/null); then
          for m_point in $(grep "^$loop_device " /proc/mounts | $magisk_bb awk '{print $2}' | grep -Ev "^$system|^/vendor"); do
            if (grep com.google.android.gms.unstable $m_point/.core/hidelist >/dev/null); then
              break 3
            fi
            unset m_point
          done
        fi
      done
    fi
  fi
  unset magisk_bb
done
if [ -z $magisk_bb ] || [ -z $m_point ]; then
  abort 'Could not set environment based on Magisk'
fi

# Set busybox up ( using hardlinks )
tmp_dir=/dev/mcc_tmp
tmp_bin=$tmp_dir/busybox
mkdir -p $tmp_bin
rm -rf $tmp_bin/.
cp -a $magisk_bb $tmp_bin
$tmp_bin/busybox --install $tmp_bin
export PATH=$tmp_bin:$PATH

# Print module name
echo -e "------------------------------------------------\n"
echo -e "     MC's Charging Controller\n"
echo -e "         by MCMotherEffin' @ XDA Developers\n"
echo -e "------------------------------------------------\n"

# Test compatibility and set references
## see the Main Script for documentation
echo -e "- Please make sure the device is charging\n"
sleep 5
echo -e "- Checking compatibility...\n"
tmp_file=$tmp_dir/cached
find /sys/devices /sys/module -type f -name uevent >$tmp_file

is_charging() { grep -q ^POWER_SUPPLY_STATUS=[Cc]harging$ $uevent; }

while read uevent; do
  if (grep -q ^POWER_SUPPLY_NAME=.*[Bb]att.*$ $uevent); then
    i=0
    for ref in ${uevent%/*}/*; do
      if [[ -f $ref ]]; then
        if (! ls -l $ref | awk '{print $1}' | grep -q w); then
          continue
        fi
      else
        continue
      fi
      chmod u+r $ref
      case $(cat $ref) in
        1       )
          echo 0 >$ref
          c_ON=1; c_OFF=0;              ;;
        0       )
          echo 1 >$ref
          c_ON=0; c_OFF=1;              ;;
        on      )
          echo off >$ref
          c_ON=on; c_OFF=off;           ;;
        off     )
          echo on >$ref
          c_ON=off; c_OFF=on;           ;;
        true    )
          echo false >$ref
          c_ON=true; c_OFF=false;       ;;
        false   )
          echo true >$ref
          c_ON=false; c_OFF=true;       ;;
        enable  )
          echo disable >$ref
          c_ON=enable; c_OFF=disable;   ;;
        disable )
          echo enable >$ref
          c_ON=disable; c_OFF=enable;   ;;
        enabled )
          echo disabled >$ref
          c_ON=enabled; c_OFF=disabled; ;;
        disabled)
          echo enabled >$ref
          c_ON=disabled; c_OFF=enabled; ;;
        *       )
          continue                      ;;
      esac; sleep 0.2
      if (! is_charging); then
        echo $c_ON >$ref; sleep 0.2;
        if (is_charging); then
          switches[i]="$ref $c_ON $c_OFF"
          ((i += 1))
          if [[ $i -eq 4 ]]; then break 2; fi
        fi
      fi
      echo $c_ON >$ref
    done
    if [[ $i -gt 0 ]]; then break; fi
  fi
done <$tmp_file
if [[ $i -eq 0 ]]; then
  abort "Your device don't support these functionalities"
fi
echo -e "- OK\n"

# Create or resize image for installation
image=${image%/*}/magisk_merge.img
if [[ -f $image ]]; then
  echo -e "- $image exists\n"

  imgsize_test() {
    e2fsck -n $image | grep -Eo '[0-9]+/[0-9]+ blocks' | cut -d/ -f$1 | awk '{print int($1 / 256)}'
  }

  if [[ $(($(imgsize_test 1) + 1)) -eq $(imgsize_test 2) ]]; then
    echo -e "- Expanding $image...\n"
    resize2fs $image $((img_total + 64))M
  fi
else
  echo -e "- Creating $image...\n"
  make_ext4fs -l 64M $image >&2
fi

is_mounted() { grep -q " $mount_point " /proc/mounts; }

# Mount the image
mount_point=/dev/mcc_img
echo -e "- Mounting $image...\n"
mkdir $mount_point
for minor in 0 1 2 3 4 5 6 7; do
  loop_device=/dev/block/loop$minor
  if [[ ! -b $loop_device ]]; then
    mknod $loop_device b 7 $minor
  fi
  if (losetup $loop_device $image); then
    mount -t ext4 -o loop $loop_device $mount_point
  fi
  if (is_mounted); then break; fi
done
if (! is_mounted); then
  abort "Could not mount $image"
fi

get_prop() { sed -n s/^$1=//p $2; }

# Detect whether to install / uninstall
mod_dir=$mount_point/mcc
main_mod_dir=$m_point/mcc
if [[ $(get_prop versionCode $mod_dir/module.prop || get_prop versionCode $main_mod_dir/module.prop || echo 0) -ge 201802091 ]]; then

  # Uninstall
  echo -e "- Same or newer already installed\n"
  echo -e "- Attention :- Uninstalling...\n"
  rm -rf $mod_dir $main_mod_dir
else

  # Install

  # Create all needed directories
  rm -rf $mod_dir
  mkdir -p $mod_dir/docs $mod_dir/cache
  

  # Extract module files
  echo -e "- Extracting module files...\n"
  unzip -o "$zip_file" 'system/*' mcc.conf service.sh module.prop -d $mod_dir >&2
  unzip -o "$zip_file" LICENSE.md README.md -d $mod_dir/docs >&2
  bin_dir=$mod_dir/system/xbin
  if [[ ! -d $system/xbin ]]; then

    # Target tree missing from system root
    ## thus, Magic Mounting can be too dangerous
    ## So, install mcc in system internal executable path
    ## for it is guaranteed to exist
    mv $bin_dir $mod_dir/system/bin
    bin_dir=$mod_dir/system/bin
  fi

  set_prop() { sed -i "s|^$1=.*|$1=$2|g" $mod_dir/mcc.conf; }

  if old_conf=$(ls $main_mod_dir/mcc.conf || ls $main_mod_dir/data/settings.conf); then

    # Restore settings
    echo -e "- Restoring settings...\n"
    for prop in auto_shut daemon_mode up_threshold down_threshold shut_threshold; do
      set_prop $prop $(get_prop $prop $old_conf)
    done
  fi

  # Set uevent and switches in mcc.conf
  set_prop uevent $uevent
  for i in 0 1 2 3; do
    case ${switches[i]} in
      '')
        break
      ;;
      * )
        set_prop switch_$((i + 1)) "${switches[i]}"
      ;;
    esac
  done

  # Enable magic mount
  touch $mod_dir/auto_mount

  # Update info for Magisk Manager
  mkdir $main_mod_dir
  touch $main_mod_dir/update
  cp -f $mod_dir/module.prop $main_mod_dir

  set_perm_recursive() {
    find $1 | while read entry; do
      chown 0:$2 $entry
      if [[ ! -d $entry ]]; then
        chmod $3 $entry
      else
        chmod 0755 $entry
      fi
      chcon u:object_r:system_file:s0 $entry
    done
  }

  # Set permissions
  echo -e "- Setting permissions...\n"
  set_perm_recursive $mod_dir    0 0644
  set_perm_recursive $bin_dir 2000 0755
fi

# Unmount the image
umount $mount_point; losetup -d $loop_device;
rmdir $mount_point

# Cleanup
rm -rf $tmp_dir
echo -e "- Done\n"
exit 0
