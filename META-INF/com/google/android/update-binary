#!/sbin/sh
##########################################################################################
#
# Magisk Module Template Install Script
# by topjohnwu
# Modified by MCMotherEffin' @ XDA Developers
# for to support newer magisk versions
#
##########################################################################################

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

# This path should work in any cases
TMPDIR=/dev/tmp
MOUNTPATH=/magisk
MMOUNTPATH=/dev/magisk_merge
IMG=/data/magisk.img
MIMG=/data/magisk_merge.img
if $BOOTMODE; then
  MOUNTPATH=$MMOUNTPATH
  IMG=$MIMG
fi
INSTALLER=$TMPDIR/install
UTIL=`find /data -type f -name util_functions.sh | grep '/magisk/util_functions.sh$'`
MAGISKBIN=`dirname $UTIL`

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

##########################################################################################
# Environment
##########################################################################################

OUTFD=$2
ZIPFILE="$3"

ui_print() {
  if $BOOTMODE; then
    echo "$1"
  else
    echo -n -e "ui_print $1\n" >>/proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >>/proc/self/fd/$OUTFD
  fi
}

require_new_magisk() {
  ui_print "***********************************"
  ui_print "! Magisk isn't setup properly!"
  ui_print "! Please install Magisk v14.0+!"
  ui_print "***********************************"
  exit 1
}

# Detect magisk.img mountpoint
get_mountpoint() {
  for LOOP in 0 1 2 3 4 5 6 7; do
    if losetup /dev/block/loop$LOOP 2>/dev/null | grep -q '/magisk.img$'; then
      for MPOINT in `grep "/dev/block/loop$LOOP " /proc/mounts | awk '{print $2}' | grep -v '^/system'`; do
        if [ ! -z "$MPOINT" ]; then
          if [ -f "$MPOINT/.core/hidelist" ]; then
            if [ -d "$MPOINT/.core/service.d" ]; then
              echo "$MPOINT"
              break 2
            fi
          fi
        fi
        unset MPOINT
      done
    fi
  done
}

mount /data 2>/dev/null

# Utility functions must exist
[ -f $UTIL ] || require_new_magisk
# Load utility fuctions
. $UTIL
get_outfd

[ -z $MAGISK_VER_CODE ] && require_new_magisk

ui_print " "
if [ $MAGISK_VER_CODE -gt 1400 ]; then
  mount_partitions
  if ! $BOOTMODE && [ $MAGISK_VER_CODE -ge 1468 ]; then
    IMG=/data/adb/magisk.img
  fi
else
  ui_print "- Mounting /system, /vendor"
  mount -o ro /system 2>/dev/null
  mount -o ro /vendor 2>/dev/null
  [ -f "/system/build.prop" ] || abort "! /system could not be mounted!"
fi
ui_print " "

if $BOOTMODE; then
  MOUNTPOINT=`get_mountpoint`
  [ -z "$MOUNTPOINT" ] && abort "! Magisk is not activated!"
fi

# Detect version and architecture
api_level_arch_detect

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

# We need busybox/binaries to be setup
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

# Extract common files ###
unzip -oq "$ZIPFILE" 'common/*' config.sh module.prop -d $INSTALLER 2>/dev/null

[ ! -f $INSTALLER/config.sh ] && abort "! Unable to extract zip file!"
# Load configurations
. $INSTALLER/config.sh

# Check the min magisk version
MIN_VER=`grep_prop template $INSTALLER/module.prop`
[ $MAGISK_VER_CODE -ge $MIN_VER ] || require_new_magisk
MODID=`grep_prop id $INSTALLER/module.prop`
MODPATH=$MOUNTPATH/$MODID
if $BOOTMODE; then
  BMODPATH="$MOUNTPOINT"/$MODID
else
  MMODPATH=$MMOUNTPATH/$MODID
fi

# Print mod name
print_modname
ui_print " "

# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"
ui_print " "

##########################################################################################
# Install
##########################################################################################

request_zip_size_check "$ZIPFILE"

if [ -f "$IMG" ]; then
  ui_print "- Found $IMG"
  image_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    newSizeM=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
    ui_print "- Resizing $IMG to ${newSizeM}M"
    $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
  fi
else
  newSizeM=$((reqSizeM / 32 * 32 + 64));
  ui_print "- Creating $IMG with size ${newSizeM}M"
  $MAGISKBIN/magisk --createimg $IMG $newSizeM >/dev/null
fi

ui_print "- Mounting $IMG to $MOUNTPATH"
MAGISKLOOP=`$MAGISKBIN/magisk --mountimg $IMG $MOUNTPATH`
is_mounted $MOUNTPATH || abort "! $IMG mount failed..."
if ! $BOOTMODE && [ -f "$MIMG" ]; then
  MERGELOOP=`$MAGISKBIN/magisk --mountimg $MIMG $MMOUNTPATH`
fi

# Determine if installed or not
if [ -f "$MMODPATH/module.prop" ]; then
  CVCODE=`grep_prop versionCode $MMODPATH/module.prop`
elif [ -f "$MODPATH/module.prop" ]; then
  CVCODE=`grep_prop versionCode $MODPATH/module.prop`
elif [ -f "$BMODPATH/module.prop" ]; then
  CVCODE=`grep_prop versionCode $BMODPATH/module.prop`
else
  CVCODE=0
fi

# Flash again to uninstall
if [ `grep_prop versionCode $INSTALLER/module.prop` -le $CVCODE ]; then
  ui_print "- Same or older detected"
  ui_print "- Uninstalling"
  rm -rf $MODPATH "$BMODPATH" $MMODPATH 2>/dev/null
else
  set_prop() {
    sed -i "s|$1=.*|$1=$2|g" $MODPATH/data/settings.conf
  }

  # Preserve old settings
  if $BOOTMODE; then
    OLDCONFIG=$BMODPATH/data/settings.conf
  else
    OLDCONFIG=$MODPATH/data/settings.conf
  fi
  if [ -f "$OLDCONFIG" ]; then
    ui_print "- Backing up old settings"
    SET1=`grep_prop auto_shut $OLDCONFIG`
    SET2=`grep_prop daemon_mode $OLDCONFIG`
    SET3=`grep_prop do_ver_logging $OLDCONFIG`
    SET4=`grep_prop uevent $OLDCONFIG`
    SET5="`grep_prop switch $OLDCONFIG`"
    SET6=`grep_prop up_threshold $OLDCONFIG`
    SET7=`grep_prop down_threshold $OLDCONFIG`
    SET8=`grep_prop shut_threshold $OLDCONFIG`
  fi

  # Create mod paths
  rm -rf $MODPATH 2>/dev/null
  mkdir -p $MODPATH 2>/dev/null

  # Copy files
  ui_print "- Copying module files"
  unzip -oq "$ZIPFILE" 'system/*' -d $MODPATH 2>/dev/null
  if echo $ARCH | grep -q x; then
    cp -af $INSTALLER/common/zip_x86 $MODPATH/zip
  else
    cp -af $INSTALLER/common/zip_arm $MODPATH/zip
  fi
  cp -af $INSTALLER/common/data $MODPATH
  unzip -oq "$ZIPFILE" README.md -d $MODPATH/data 2>/dev/null

  # Set preserved settings
  if [ ! -z "$SET1" ]; then
    ui_print "- Restoring old settings"
    set_prop auto_shut $SET1
    set_prop daemon_mode $SET2
    set_prop do_ver_logging $SET3
    set_prop uevent $SET4
    set_prop switch "$SET5"
    set_prop up_threshold $SET6
    set_prop down_threshold $SET7
    set_prop shut_threshold $SET8
  fi

  # Handle replace folders
  for TARGET in $REPLACE; do
    mktouch $MODPATH$TARGET/.replace
  done

  # Auto Mount
  $AUTOMOUNT && touch $MODPATH/auto_mount

  # prop files
  $PROPFILE && cp -af $INSTALLER/common/system.prop $MODPATH

  # Module info
  cp -af $INSTALLER/module.prop $MODPATH

  if $BOOTMODE; then
    # Update info for Magisk Manager
    mktouch $BMODPATH/update
    cp -af $INSTALLER/module.prop $BMODPATH
  fi

  # post-fs-data mode scripts
  $POSTFSDATA && cp -af $INSTALLER/common/post-fs-data.sh $MODPATH

  # service mode scripts
  $LATESTARTSERVICE && cp -af $INSTALLER/common/service.sh $MODPATH

  ui_print "- Setting permissions"
  set_permissions
fi

##########################################################################################
# Finalizing
##########################################################################################

$MAGISKBIN/magisk --umountimg $MOUNTPATH $MAGISKLOOP
rmdir $MOUNTPATH
$MAGISKBIN/magisk --umountimg $MMOUNTPATH $MERGELOOP 2>/dev/null
rmdir $MMOUNTPATH 2>/dev/null

# Shrink the image if possible
image_size_check $IMG
newSizeM=$((curUsedM / 32 * 32 + 64))
if [ $curSizeM -gt $newSizeM ]; then
  ui_print "- Shrinking $IMG to ${newSizeM}M"
  $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
fi

$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

ui_print "- Done"
ui_print " "
exit 0
