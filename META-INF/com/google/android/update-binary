#!/sbin/sh
##########################################################################################
#
# Magisk Module Template Install Script
# by topjohnwu
# Modified by MCMotherEffin' @ XDA Developers
# for to support newer magisk versions
#
##########################################################################################

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

# Only BOOTMODE installation
if ! $BOOTMODE; then
  OUTFD=$2
  ui_print() {
    echo -n -e "ui_print $1\n" >>/proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >>/proc/self/fd/$OUTFD
  }
  ui_print " "
  ui_print "(!) Please install in BOOTMODE"
  ui_print " "
  exit 1
fi

echo " "

# This path should work in any cases
TMPDIR=/dev/tmp
MOUNTPATH=/dev/magisk_merge
IMG=/data/magisk_merge.img
INSTALLER=$TMPDIR/install
UTIL=`find /data -type f -name util_functions.sh | grep '/magisk/util_functions.sh$'`
MAGISKBIN=${UTIL%/*}

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

##########################################################################################
# Environment
##########################################################################################

ZIPFILE="$3"

require_new_magisk() {
  echo "***********************************"
  echo "! Magisk isn't setup properly!"
  echo "! Please install Magisk v14.0+!"
  echo "***********************************"
  exit 1
}

# Utility functions must exist
[ -f $UTIL ] || require_new_magisk
# Load utility fuctions
. $UTIL

[ -z $MAGISK_VER_CODE ] && require_new_magisk

# Detect whether A/B device
[ -d /system_root ] && system=/system_root/system || system=/system

# Detect Magisk mountpoint
for LOOP in 0 1 2 3 4 5 6 7; do
  if losetup /dev/block/loop$LOOP | grep -q '^/data.*magisk.img$'; then
    for MOUNTPOINT in `grep "/dev/block/loop$LOOP " /proc/mounts | awk '{print $2}' | grep -v "^$system"`; do
      if [ ! -z "$MOUNTPOINT" ]; then
        if [ -f "$MOUNTPOINT/.core/hidelist" ]; then
          if [ -d "$MOUNTPOINT/.core/service.d" ]; then
            break 2
          fi
        fi
      fi
      unset MOUNTPOINT
    done
  fi
done
[ -z "$MOUNTPOINT" ] && abort "! Magisk is not activated!"

# We need busybox/binaries to be setup
boot_actions

##########################################################################################
# Preparation
##########################################################################################

# Extract common files ###
unzip -oq "$ZIPFILE" 'common/*' module.prop -d $INSTALLER 2>/dev/null

[ ! -f $INSTALLER/module.prop ] && abort "! Unable to extract zip file!"

# Check the min magisk version
[ $MAGISK_VER_CODE -ge 1400 ] || require_new_magisk
MODID=mcc
MODPATH=$MOUNTPATH/$MODID
BMODPATH="$MOUNTPOINT"/$MODID

# Print mod name
echo "------------------------------------------------"
echo "     MC's Charging Controller (mcc)"
echo "         by MCMotherEffin' @ XDA Developers"
echo "------------------------------------------------"
echo " "

# Please leave this message in your flashable zip for credits :)
echo "****************************************"
echo "     Powered by Magisk (@topjohnwu)     "
echo "****************************************"
echo " "

##########################################################################################
# Install
##########################################################################################

# Test compatibility and set references
# ( device must be charging throughout )
echo "(!) Please make sure the device is charging"
echo " "
sleep 3
echo "(i) Checking compatibility..."
find /sys/devices -type f ! -name *.log 2>/dev/null | grep -E 'batt|charg' | sort >/cache/tmpfile_mcc
for UEVENT_ in `grep '/uevent$' /cache/tmpfile_mcc`; do
  if grep -q '^POWER_SUPPLY_NAME=.*[Bb]att.*$' $UEVENT_ \
  || grep -q '^POWER_SUPPLY_NAME=.*[Uu][Ss][Bb].*$' $UEVENT_ \
  || grep -q '^POWER_SUPPLY_NAME=.*[Dd][Cc].*' $UEVENT_; then
    SYSDIR=${UEVENT_%/*}; cd $SYSDIR;

    for REF_ in `ls`; do
      chown 0:0 $REF_; chmod 644 $REF_;

      case `cat $REF_` in
        1) echo 0 >$REF_
          c_ON=1; c_OFF=0; ;;

        0) echo 1 >$REF_
          c_ON=0; c_OFF=1; ;;

        on) echo off >$REF_
          c_ON=on; c_OFF=off; ;;

        off) echo on >$REF_
          c_ON=off; c_OFF=on; ;;

        true) echo false >$REF_
          c_ON=true; c_OFF=false; ;;

        false) echo true >$REF_
          c_ON=false; c_OFF=true; ;;

        enable) echo disable >$REF_
          c_ON=enable; c_ON=disable; ;;

        disable) echo enable >$REF_
          c_ON=disable; c_OFF=enable; ;;

        enabled) echo disabled >$REF_
          c_ON=enabled; c_OFF=disabled; ;;

        disabled) echo enabled >$REF_
          c_ON=disabled; c_OFF=enabled; ;;

        *) continue ;;
      esac; sleep 0.2;
      if ! grep -q '^POWER_SUPPLY_STATUS=[Cc]harging$' $UEVENT_; then
        echo $c_ON >$REF_; sleep 0.2;
        if grep -q '^POWER_SUPPLY_STATUS=[Cc]harging$' $UEVENT_; then
          OK=true
          break 2
        fi
      fi
      echo $c_ON >$REF_
    done
    cd /
  fi
done
rm -f /cache/tmpfile_mcc

# Proceed, if only found compatible
if [ "$OK" ]; then
  echo "- OK"
  echo " "
else
  echo "! Your kernel don't support this functionality!"
  exit 1
fi

# Get required image size
request_zip_size_check "$ZIPFILE"

# Create or if found and need space, resize merge image
if [ -f "$IMG" ]; then
  echo "- Found $IMG"
  image_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    newSizeM=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
    echo "- Resizing $IMG to ${newSizeM}M"
    $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
  fi
else
  newSizeM=$((reqSizeM / 32 * 32 + 64));
  echo "- Creating $IMG with size ${newSizeM}M"
  $MAGISKBIN/magisk --createimg $IMG $newSizeM >/dev/null
fi

# Mount the image
echo "- Mounting $IMG to $MOUNTPATH"
MAGISKLOOP=`$MAGISKBIN/magisk --mountimg $IMG $MOUNTPATH`
is_mounted $MOUNTPATH || abort "! $IMG mount failed..."

# Determine if installed or not
if [ -f "$MODPATH/module.prop" ]; then
  CVCODE=`grep_prop versionCode $MODPATH/module.prop`
elif [ -f "$BMODPATH/module.prop" ]; then
  CVCODE=`grep_prop versionCode $BMODPATH/module.prop`
else
  CVCODE=0
fi

# Flash again to uninstall
if [ `grep_prop versionCode $INSTALLER/module.prop` -le $CVCODE ]; then
  echo "- Same or older detected"
  echo "- Uninstalling"
  rm -rf $MODPATH "$BMODPATH" 2>/dev/null
else
  # Install
  set_prop() {
    sed -i "s|$1=.*|$1=$2|g" $MODPATH/data/settings.conf
  }

  # Preserve old settings
  OLDCONFIG=$BMODPATH/data/settings.conf
  if [ -f "$OLDCONFIG" ]; then
    echo "- Backing up old settings"
    SET1=`grep_prop auto_shut $OLDCONFIG`
    SET2=`grep_prop daemon_mode $OLDCONFIG`
    SET3=`grep_prop do_ver_logging $OLDCONFIG`
    SET4=`grep_prop up_threshold $OLDCONFIG`
    SET5=`grep_prop down_threshold $OLDCONFIG`
    SET6=`grep_prop shut_threshold $OLDCONFIG`
  fi

  # Create mod paths
  rm -rf $MODPATH 2>/dev/null
  mkdir -p $MODPATH 2>/dev/null

  # Copy files
  echo "- Copying module files"
  unzip -oq "$ZIPFILE" 'system/*' -d $MODPATH 2>/dev/null
  if echo $ARCH | grep -q x; then
    cp -af $INSTALLER/common/zip_x86 $MODPATH/zip
  else
    cp -af $INSTALLER/common/zip_arm $MODPATH/zip
  fi
  cp -af $INSTALLER/common/data $MODPATH
  unzip -oq "$ZIPFILE" README.md -d $MODPATH/data 2>/dev/null

  # Set preserved settings
  if [ ! -z "$SET1" ]; then
    echo "- Restoring old settings"
    set_prop auto_shut $SET1
    set_prop daemon_mode $SET2
    set_prop do_ver_logging $SET3
    set_prop up_threshold $SET4
    set_prop down_threshold $SET5
    set_prop shut_threshold $SET6
  fi
  set_prop uevent $UEVENT_
  set_prop switch "$SYSDIR/$REF_ $c_ON $c_OFF"

  # Auto mount
  touch $MODPATH/auto_mount

  # Module info
  cp -af $INSTALLER/module.prop $MODPATH

  # Update info for Magisk Manager
  mktouch $BMODPATH/update
  cp -af $INSTALLER/module.prop $BMODPATH

  # service mode scripts
  cp -af $INSTALLER/common/service.sh $MODPATH

  echo "- Setting permissions"
  set_perm_recursive  $MODPATH  0  0  0755  0644
  set_perm_recursive $MODPATH/system/bin  0  2000  0755 0755
  set_perm $MODPATH/zip  0  2000  0755
fi

##########################################################################################
# Finalizing
##########################################################################################

$MAGISKBIN/magisk --umountimg $MOUNTPATH $MAGISKLOOP
rmdir $MOUNTPATH

# Shrink the image if possible
image_size_check $IMG
newSizeM=$((curUsedM / 32 * 32 + 64))
if [ $curSizeM -gt $newSizeM ]; then
  echo "- Shrinking $IMG to ${newSizeM}M"
  $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
fi

# Clean temporary files
rm -rf $TMPDIR

echo "- Done"
echo " "
exit 0
