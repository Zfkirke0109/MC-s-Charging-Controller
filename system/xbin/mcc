#!/system/bin/sh
# MC's Charging Controller
# mcc Main Script
# versionCode = 201801111
# MCMotherEffin' @ XDA Developers

# Make sure mcc is running as root
if (! id | grep -q uid=0); then
  su -c mcc $@; exit $?;
fi

# Environment logger
if [ ! "$no_logging" ]; then
  set -x 2>/cache/mcc_env.log
fi
echo ' '

# Set busybox up
magisk_bb=$(find /data -type f -name busybox | grep /magisk/busybox$)
if [ ! -x "$magisk_bb" ]; then
  echo -e "- Abort :- Could not find Magisk internal busybox\n"
  exit 1
fi
for func in $($magisk_bb --list); do
  alias $func="$magisk_bb $func" 2>/dev/null
done

# Detect whether A / B device
if [[ -d /system_root ]]; then
  system=/system_root/system
else
  system=/system
fi

# Detect Magisk mount point
for loop_device in /dev/block/loop*; do
  if (losetup $loop_device | grep -q ${magisk_bb%/*/*}/magisk.img); then
    for mount_point in $(grep "$loop_device " /proc/mounts | awk '{print $2}' | grep -v ^$system); do
      if [[ ! -z $mount_point ]]; then
        if [[ -f $mount_point/.core/hidelist ]]; then
          if [[ -d $mount_point/.core/service.d ]]; then
            break 2
          fi
        fi
      fi
      unset mount_point
    done
  fi
done
if [[ ! -z $mount_point ]]; then
  mod_dir=$mount_point/mcc
else
  echo -e "- Abort :- Could not find Magisk mount point\n"
  exit 1
fi

# All universal variables are defined here
data_dir=$mod_dir/data
config=$data_dir/settings.conf
ver_log=$data_dir/verbose.log

# All universal functions are defined here

## yields an error and exits 1

abort() { echo -e "- Abort :- $1\n"; exit 1; }

## gets a property from a prop file

get_prop() {
  if [[ ! -z $2 ]]; then
    prop_file=$2
  else
    prop_file=$config
  fi
  sed -n s/^$1=//p $prop_file
}

## sets a property in a prop file

set_prop() {
  if [[ ! -z $3 ]]; then
    prop_file=$3
  else
    prop_file=$config
  fi
  sed -i "s|^$1=.*|$1=$2|g" $prop_file
}

## tests if the argument is a battery level

test_level() {
  if (echo $1 | grep -Eq ^[0-9]+$); then
    if [[ $1 -lt 0 || $1 -gt 100 ]]; then
      abort 'Please give a level between 0 - 100'
    fi
  else
    abort 'Please give only numbers'
  fi
}

## tests if arguments are not so close

test_diff() {
  if [[ ! $1 -ge $(($2 + 5)) ]]; then
    abort "Please don't give this close thresholds"
  fi
}

## tests and if false, toggles the prop true

test_toggle() {
  if (! $($1)); then
    set_prop $1 true
    echo -e "- Attention :- $2 toggled ON\n"
  fi
}

## toggles the prop true / false

toggle() {
  if ($($1)); then
    value=false; status=OFF;
  else
    value=true; status=ON;
  fi
  echo -e "- Toggling $2 $status...\n"
  set_prop $1 $value
  echo -e "- Done\n"
}

## turns charging ON / OFF

switch_() {
  for i in 1 2 3 4; do
    c_ON=$(get_prop switch_$i | awk '{print $2}')
    c_OFF=$(get_prop switch_$i | awk '{print $3}')
    switch=$(get_prop switch_$i | awk '{print $1}')
    case $switch in
      not_found_yet)
        break
      ;;
      *            )
        case $1 in
          ON) echo $c_ON  >$switch ;;
          * ) echo $c_OFF >$switch ;;
        esac
      ;;
    esac
  done
}

## overrides daemon mode if running

override_daemon() {
  if ($(daemon_mode)); then
    set_prop daemon_mode false
    overridden=true
  fi
}

## tests and updates up, down_threshold

test_update_udt() {
  if [[ ! -z $2 ]]; then
    if [[ $1 -lt 15 || $2 -lt 15 ]]; then
      gerror=true
    fi
    if [[ $1 -gt 85 || $2 -gt 85 ]]; then
      gerror=true
    fi
  else
    if [[ $1 -lt 20 || $1 -gt 85 ]]; then
      gerror=true
    fi
    if [[ $1 -gt 25 ]]; then
      d=$(($1 - 10)); else d=15
    fi
  fi
  if [[ $gerror && ! $force ]]; then
    abort 'Please give a level between 15 - 85'
  fi
  u=$1; if [[ ! $d ]]; then d=$2; fi
  set_prop up_threshold $u
  set_prop down_threshold $d
  echo -e "- New values saved\n"
}

## tests whether the device is charging

is_charging() { grep -q ^POWER_SUPPLY_STATUS=[Cc]harging$ $(uevent_f); }

# Always get props in realtime

uevent_f() { get_prop uevent; }

auto_shut() { get_prop auto_shut; }

daemon_mode() { get_prop daemon_mode; }

batt_level() { get_prop POWER_SUPPLY_CAPACITY $(uevent_f); }

up_threshold() { get_prop up_threshold; }

down_threshold() { get_prop down_threshold; }

shut_threshold() { get_prop shut_threshold; }

# This tests compatibility and sets references
## ( device must be charging throughout )

set_ctrl_refs() {
  uevent_cache=$data_dir/uevent_cache.tmp

  ## reset previous switches
  for i in 1 2 3 4; do
    set_prop switch_$i 'not_found_yet dummy_ON dummy_OFF'
  done
  echo -e "- Attention :- Please make sure the device is charging\n"
  sleep 5

  ## get all possible references
  echo -e "- Re-configuring sysfs references...\n"
  if [[ ! -f $uevent_cache ]]; then
    find /sys/devices -type f -name uevent | grep -E 'batt|charg' | sort >$uevent_cache
  fi

  echo_write() { echo $1 >$2 2>/dev/null; }

  while read uevent; do

    ## cycling through all, get a matching uevent file
    if (grep -q ^POWER_SUPPLY_NAME=.*[Bb]att.*$ $uevent); then
      set_prop uevent $uevent

      ## ask and wait for charger
      ## ( mcc in installed, thus is safe )
      while (! is_charging); do
        echo -e "- Caution :- Device seem not charging\n"; sleep 5;
      done; sleep 0.2

      ## cycling through all, get a boolean switch
      i=1
      for ref in ${uevent%/*}/*; do
      if [[ -f $ref ]]; then
      chown 0:0 $ref; chmod 644 $ref;
      else continue; fi
        case $(cat $ref) in
          1       )
            echo_write 0 $ref
            c_ON=1; c_OFF=0;              ;;
          0       )
            echo_write 1 $ref
            c_ON=0; c_OFF=1;              ;;
          on      )
            echo_write off $ref
            c_ON=on; c_OFF=off;           ;;
          off     )
            echo_write on $ref
            c_ON=off; c_OFF=on;           ;;
          true    )
            echo_write false $ref
            c_ON=true; c_OFF=false;       ;;
          false   )
            echo_write true $ref
            c_ON=false; c_OFF=true;       ;;
          enable  )
            echo_write disable $ref
            c_ON=enable; c_OFF=disable;   ;;
          disable )
            echo_write enable $ref
            c_ON=disable; c_OFF=enable;   ;;
          enabled )
            echo_write disabled $ref
            c_ON=enabled; c_OFF=disabled; ;;
          disabled)
            echo_write enabled $ref
            c_ON=disabled; c_OFF=enabled; ;;
          *       )
            continue                      ;;
        esac; sleep 0.2

        ## test if that works correctly,
        if (! is_charging); then
          echo_write $c_ON $ref; sleep 0.2;
          if (is_charging); then

            ## if yes, add it
            set_prop switch_$i "$ref $c_ON $c_OFF"
            ((i += 1)); if [[ $i -eq 5 ]]; then
              break 2
            fi
          fi
        fi
        echo_write $c_ON $ref
      done
      if [[ $i -gt 1 ]]; then break; fi
    fi
  done <$uevent_cache
  if [[ $i -gt 1 ]]; then
    test_toggle daemon_mode "Daemon mode"
    echo -e "- Done\n"
  else

    ## switch is not found, reset uevent,
    ## toggle auto_shut OFF
    set_prop uevent not_found_yet
    if ($(auto_shut)); then
      set_prop auto_shut false
      echo -e "- Attention :- Automatic power-off toggled OFF\n"
    fi
    abort "Your device don't support these functionalities"
  fi
}

# Function for [ --enable / --disable ] [ % / time ]

charge() {
  case $1 in
    enable)
      turn_1=ON; turn_2=OFF; op=-lt;
      text=enabled; test='! is_charging';
    ;;
    *     )
      turn_1=OFF; turn_2=ON; op=-gt;
      text=disabled; test='is_charging';
    ;;
  esac
  if [[ ! -z $2 ]]; then
    if (echo $2 | grep -Eq ^[0-9]+%$); then
      level=$(echo $2 | tr -d %)
      if [[ $level -lt 0 || $level -gt 100 ]]; then
        abort 'Please give a level between 0 - 100'
      fi
      override_daemon
      if (eval $test); then
        switch_ $turn_1
      fi
      echo -e "- Charging $text until $threshold%...\n"
      while eval [[ \$\(batt_level\) $op \$threshold ]]; do
        if (eval $test); then
          switch_ $turn_1
        fi
        sleep 10
      done
      switch_ $turn_2
    elif (echo $2 | grep -Eq ^[0-9]+[smh]?$); then
      override_daemon
      if (eval $test); then
        switch_ $turn_1
      fi
      echo -e "- Charging $text for $2...\n"
      sleep $2
      switch_ $turn_2
    else
      abort 'Please give a valid argument'
    fi
  else
    override_daemon
    if (eval $test); then
      switch_ $turn_1
    fi
    echo -e "- Charging $text\n"
  fi
  if [[ $overridden ]]; then
    set_prop daemon_mode true
  fi
}

# Disable env logger
set +x

# Verbose logger
if [[ ! $no_logging ]]; then
  if [[ -f $ver_log ]]; then
    mv -f $ver_log $data_dir/verbose_last.log
  fi
  getprop | grep product | tr -d [ | tr -d ] >$ver_log
  echo -e "\n\nversionCode = 201801111\n\n" >>$ver_log
  set -x 2>>$ver_log
fi

# Set kernel references unless done
if [[ $(uevent_f) = not_found_yet ]]; then
  case $1 in
    --help           )               ;;
    --reconf         )               ;;
    --debug          )               ;;
    --statreset      )               ;;
    --service_trigger)               ;;
    --daemon         ) if (! $(daemon_mode)); then
            set_ctrl_refs
                       fi            ;;
    --autoshut       ) if (! $(auto_shut)); then
            set_ctrl_refs
                       fi            ;;

    *                ) set_ctrl_refs ;;
  esac
fi

# Handle [ --force ]
if [[ $1 = --force ]]; then
  force=true; shift;
fi

# Handle given arguments
case $1 in

## info
  --info)
    echo -e "- Battery status\n"
    echo "-- battery level :- $(batt_level)"
    echo "-- battery health :- $(get_prop POWER_SUPPLY_HEALTH $(uevent_f))"
    echo -e "-- charging status :- $(get_prop POWER_SUPPLY_STATUS $(uevent_f))\n"

    echo -e "- Current settings\n"
    echo "-- up threshold :- $(up_threshold)"
    echo "-- down threshold :- $(down_threshold)"
    echo -e "-- shut threshold :- $(shut_threshold)\n"

    if ($(daemon_mode)); then status=ON;
    else status=OFF; fi
    echo "-- magisk daemon mode :- $status"
    if ($(auto_shut)); then status=ON;
    else status=OFF; fi
    echo -e "-- automatic power-off :- $status\n"
  ;;

## manpage
  --help)
    while read line; do
      case $line in
        '### Changelog') break      ;;
        *              ) echo $line ;;
      esac
    done <$data_dir/README.md
  ;;

## re-test and configure sysfs references
  --reconf) set_ctrl_refs
  ;;

## reset battery stats
  --statreset)
    echo -e "- Resetting battery statistics...\n"
    if (! dumpsys batterysats --reset >/dev/null 2>&1); then
      rm -f /data/system/batterystats.bin
    fi
    echo -e "- Done\n"
  ;;

## toggle auto shut
  --autoshut) toggle auto_shut 'automatic power-off'
  ;;

## toggle daemon mode
  --daemon) toggle daemon_mode 'daemon mode'
  ;;

## enable charging
## ( on demand / or for certain % / time )
  --enable) charge enable $2
  ;;

## disable charging
## same as above
  --disable) charge disable $2
  ;;

## trigger service ( Magisk )
  --service_trigger)
    while(:); do

      ## automatic power-off
      if ($(auto_shut)); then
        if [[ $(batt_level) -le $(shut_threshold) ]]; then
          if (! is_charging); then
            poweroff
          fi
        fi
      fi

      ## daemon mode
      if ($(daemon_mode)); then
        if [[ $(batt_level) -ge $(up_threshold) ]]; then
          if (is_charging); then
            switch_ OFF
          fi
        elif [[ $(batt_level) -le $(down_threshold) ]]; then
          if (! is_charging); then
            switch_ ON
          fi
        fi
      fi
      sleep 10
    done
  ;;

## thresholds back to defaults
  --default)
    set_prop shut_threshold 20
    set_prop up_threshold 70
    set_prop down_threshold 60
    echo -e "- Reverted all the thresholds to defaults\n"
  ;;

## update auto shut threshold
  --shut)
    if [[ ! -z $2 ]]; then
      if (echo $2 | grep -Eq ^[0-9]+$); then
        if [[ $2 -gt 20 || $2 -lt 5 ]]; then
          if [[ ! $force ]]; then
            abort 'Please give a level between 5 - 20'
          fi
        fi
      else
        abort 'Please give only numbers'
      fi
    else
      abort 'Please give a threshold'
    fi
    set_prop shut_threshold $2
    echo -e "- New value saved\n"
    test_toggle auto_shut 'Automatic power-off'
  ;;

## update daemon mode thresholds
  --reset)
    if [[ ! -z $3 ]]; then
      test_level $3; test_level $2;
      if [[ $3 -gt $2 ]]; then
        test_diff $3 $2; test_update_udt $3 $2;
      else
        test_diff $2 $3; test_update_udt $2 $3;
      fi
    elif [[ ! -z $2 ]]; then
      test_level $2; test_update_udt $2;
    else
      abort 'Please give some thresholds'
    fi
    test_toggle daemon_mode 'Daemon mode'
  ;;

## no arguments, yield for manpage
  *)
    echo -e "Heyyo fella,\n"
    echo -e "Please run \"mcc --help\" for help\n"
  ;;
esac
exit 0
